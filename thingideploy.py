#!/usr/bin/python
import argparse
import json
import os
import requests
import webbrowser
from rauth import OAuth2Service

def request_token(client_id):
    """Take app client ID and generate an API token with write acces"""
    print("Requesting token is not implemented yet")

    # paste in some stuff and hope it werks, getting a new authorized token or something
    #Authservice = OAuth2Service(
    #    name='thingiverse',
    #    client_id=client_id,
    #    client_secret=client_secret,
    #    access_token_url='https://www.thingiverse.com/login/oauth/access_token',
    #    authorize_url='https://www.thingiverse.com/login/oauth/authorize',
    #    base_url='https://api.thingiverse.com')
    ## let's get the url to go to
    #authparams = {'redirect_uri': 'https://www.thingiverse.com',
    #              'response_type': 'token'}
    #url = Authservice.get_authorize_url(**authparams)
    #webbrowser.open_new(url)
    #access_code = raw_input("access token: >")


def create_initial_folder_structure(project_path):
    """Create the initial project structure at the target location"""
    print("Creating initial project structure is not implemented yet")

def deploy_project(project_path, api_token):
    """Deploy the project using an API token generated by --request-token"""

    print("Deploying project")

    ##########################################################################
    ##                              Init                                    ##
    ##########################################################################

    headers = {'Authorization': 'Bearer ' + api_token}

    ##########################################################################
    ##                          File parsing                                ##
    ##########################################################################

    # Thing data
    datapath = project_path + "/thingdata.json"
    with open(datapath, "r", encoding="utf-8") as f:
        thingdata = json.load(f)
        print("Thingdata: ")
        print(thingdata)
        print()

        # check if thing already exists, if thingid is provided
        if thingdata['thingid'] != '':
            mode = "patch"
            thing = json.loads(
                        requests.get('http://api.thingiverse.com/things/' 
                                    + str(thingdata['thingid']), 
                                    headers=headers).text)
            if thing["id"] == thingdata["thingid"]:
                print("Thing already exists, running in patch mode")
            else:
                print("""Thing ID specified in flags.json but thing doesn't
                         exist or name doesn't match, aborting""")
                exit()
        else:
            mode = "create"
            print('Thing does not exist yet, running in creation mode')
        print()

    # Description
    descpath = project_path + "/README.md"
    with open(descpath, "r", encoding="utf-8") as f:
        desc = f.read()
        print("Description: ")
        print(desc)
        print()

    # 3D files
    threedpath = project_path + "/3d"
    threedfiles = []
    for file in os.listdir(threedpath):
        if (file.endswith(".stl")  or
            file.endswith(".obj")  or
            file.endswith(".stp")  or
            file.endswith(".STEP") or
            file.endswith(".3mf")):
            threedfiles.append(os.path.join(threedpath, file))
    print("Found 3D files: ")
    for file in threedfiles:
        print(file)
    print()

    # Gcodes
    gcodepath = project_path + "/gcode"
    gcodefiles = []
    for file in os.listdir(gcodepath):
        if (file.endswith(".gcode")):
            gcodefiles.append(os.path.join(gcodepath, file))
    print("Found gcode files: ")
    for file in gcodefiles:
        print(file)
    print()

    # Images
    imgpath = project_path + "/img"
    imgfiles = []
    for file in os.listdir(imgpath):
        if (file.endswith(".png")  or
            file.endswith(".jpg")  or
            file.endswith(".bmp")):
            imgfiles.append(os.path.join(imgpath, file))
    print("Found image files: ")
    for file in imgfiles:
        print(file)
    print()

    ##########################################################################
    ##                     Thingiverse deployment                           ##
    ##########################################################################
    
########## Thing creation

    # If ID wasn't already found, first create thing
    if mode == "create":
        print("Creating thing")

        # initial file creation
        params = {  "name":     thingdata["thingname"],
                    "license":  thingdata["license"], 
                    "category": thingdata["category"]}
        thing = json.loads(
                        requests.post("http://api.thingiverse.com/things/",
                        headers=headers,
                        data=json.dumps(params)).text)
        
        # Output response to file for debugging
        with open(project_path + "/CreationResponse.json", "w") as f:
            f.write(json.dumps(thing, indent=4))

        new_thing_id = thing["id"]

        # check if valid answer received
        if new_thing_id != '':
            print("Thing creation succesful, thing ID:")
            print(new_thing_id)
        
        # Update flags document with newly created ID
        thingdata["thingid"] = new_thing_id
        with open(datapath, "w", encoding="utf-8") as f:
            f.write(json.dumps(thingdata, indent=4))

    # Otherwise, just output a patching message
    elif mode == "patch":
        print("Patching thing")

########## Thing info patching    

    params = {"is_wip": thingdata["is_wip"]}
    patch = json.loads(requests.patch('http://api.thingiverse.com/things/'
                                + str(thingdata["thingid"])
                                + "/", headers=headers,
                                data=json.dumps(params)).text)

    # Output response to file for debugging, loads and dumps formats document
    with open(project_path + "/PatchResponse.json", "w") as f:
            f.write(json.dumps(patch, indent=4))

    # check if valid answer received
    if patch["id"] == thingdata["thingid"]:
        print("Thing patching succesful")
    
########## File uploads

    pass

def main():
    ##########################################################################
    ##                            Arguments                                 ##
    ##########################################################################


    parser = argparse.ArgumentParser(description=
                     'Upload 3D printing project to Thingiverse automatically')
    # required path
    parser.add_argument('path', metavar='path', type=str,
                        help='Path to project structure')
    # optional flag to create project structure at path
    parser.add_argument('--create-project',
                         action="store_true",
                        help='Create project structure if set')
    # optional clientid input whith which a token is requested
    parser.add_argument('--request-token', metavar='clientid', type=str, 
                        help='If set creates token with supplied client ID')
    # hopefully not needed anymore
    #parser.add_argument('secret', metavar='secret', type=str, 
    #                    help='Thingiverse client secret')
    # optional token which
    parser.add_argument('--deploy-project', metavar='apitoken', type=str, 
                        help='API token generated by using --create-token')
    args = parser.parse_args()


    # generate error if no path provided 
    if not os.path.isdir(args.path):
        print('The path specified does not exist')
        exit()

    project_path    = args.path
    client_id       = str(args.request_token)
   #client_secret   = args.secret   # seems to not be needed
    api_token       = str(args.deploy_project)

    # prioritize between different modes
    if args.create_project:
        create_initial_folder_structure(project_path)

    elif args.request_token:
        request_token(client_id)

    elif args.deploy_project:
        deploy_project(project_path, api_token)
    else:
        print("No mode chosen, exiting")

##########################################################################
##                        main() idiom                                  ##
##########################################################################
if __name__ == '__main__':
    main()